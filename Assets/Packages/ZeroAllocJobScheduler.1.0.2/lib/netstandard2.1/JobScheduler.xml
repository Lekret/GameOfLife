<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JobScheduler</name>
    </assembly>
    <members>
        <member name="T:JobScheduler.Extensions.IJobExtensions">
            <summary>
            Extension for <see cref="T:JobScheduler.IJob"/>
            </summary>
        </member>
        <member name="M:JobScheduler.Extensions.IJobExtensions.Schedule``1(``0,System.Boolean)">
            <summary>
            Schedules the job to the global <see cref="T:JobScheduler.JobScheduler"/> ( mus have been initialized somewhere before ).
            </summary>
            <param name="jobData">The job itself</param>
            <typeparam name="T">The type</typeparam>
            <returns>The <see cref="T:JobScheduler.JobHandle"/> used to wait for the job.</returns>
        </member>
        <member name="T:JobScheduler.JobHandle">
            <summary>
            Wraps a <see cref="T:System.Threading.WaitHandle"/> Variant and is used to control / await a scheduled <see cref="T:JobScheduler.IJob"/>.
            </summary>
        </member>
        <member name="F:JobScheduler.JobHandle._event">
            <summary>
            The ManualResetEvent - Waithandle.
            </summary>
        </member>
        <member name="F:JobScheduler.JobHandle._poolOnComplete">
            <summary>
            A bool indicating whether the thread itself or tue user returns the handle to the pool. 
            </summary>
        </member>
        <member name="M:JobScheduler.JobHandle.Notify">
            <summary>
            Notifies <see cref="T:JobScheduler.JobHandle"/>, sets it signal.
            </summary>
        </member>
        <member name="M:JobScheduler.JobHandle.Complete">
            <summary>
            Waits for the <see cref="T:JobScheduler.JobHandle"/> completion.
            </summary>
        </member>
        <member name="M:JobScheduler.JobHandle.Return">
            <summary>
            Returns/Pools the <see cref="T:JobScheduler.JobHandle"/>.
            </summary>
        </member>
        <member name="M:JobScheduler.JobHandle.Complete(JobScheduler.JobHandle[])">
            <summary>
            Waits and blocks the calling thread till all <see cref="T:JobScheduler.JobHandle"/>'s are completed.
            </summary>
            <param name="handles">The handles to wait till they are completed.</param>
        </member>
        <member name="M:JobScheduler.JobHandle.Complete(System.Collections.Generic.IList{JobScheduler.JobHandle})">
            <summary>
            Waits and blocks the calling thread till all <see cref="T:JobScheduler.JobHandle"/>'s are completed.
            </summary>
            <param name="handles">The handles to wait till they are completed.</param>
        </member>
        <member name="M:JobScheduler.JobHandle.Return(JobScheduler.JobHandle[])">
            <summary>
            Returns and recycles all handles. 
            </summary>
            <param name="handles">The handles to recycle.</param>
        </member>
        <member name="M:JobScheduler.JobHandle.Return(System.Collections.Generic.IList{JobScheduler.JobHandle})">
            <summary>
            Returns and recycles all handles. 
            </summary>
            <param name="handles">The handles to recycle.</param>
        </member>
        <member name="T:JobScheduler.IJob">
            <summary>
            Represents a job which can outsource tasks to the <see cref="T:JobScheduler.JobScheduler"/>.
            </summary>
        </member>
        <member name="M:JobScheduler.IJob.Execute">
            <summary>
            Gets called by a thread to execute the job logic.
            </summary>
        </member>
        <member name="M:JobScheduler.IJob.Schedule``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{JobScheduler.JobHandle})">
            <summary>
            Schedules multiple jobs to the global <see cref="T:JobScheduler.JobScheduler"/>. Must have been initialized before. 
            </summary>
            <param name="jobs">The jobs array</param>
            <param name="handles">A empty list where the handles will land in</param>
            <typeparam name="T">The type</typeparam>
        </member>
        <member name="T:JobScheduler.JobMeta">
            <summary>
            Pares a <see cref="P:JobScheduler.JobMeta.JobHandle"/> with its <see cref="T:JobScheduler.IJob"/>
            </summary>
        </member>
        <member name="T:JobScheduler.JobScheduler">
            <summary>
            A jobscheduler, schedules and processes <see cref="T:JobScheduler.IJob"/>'s async. Better suited for larger jobs due to its underlaying events. 
            </summary>
        </member>
        <member name="M:JobScheduler.JobScheduler.#ctor(System.String,System.Int32)">
            <summary>
            Creates an instance and singleton.
            </summary>
            <param name="threads">The amount of worker threads to use. If zero we will use the amount of processors available.</param>
        </member>
        <member name="M:JobScheduler.JobScheduler.Schedule(JobScheduler.IJob,System.Boolean)">
            <summary>
            Schedules a job. Is only queued up, not being processed. 
            </summary>
            <param name="job">The job to process</param>
            <param name="poolOnComplete">Is set, the worker thread will return the handle to the pool after on. The user should not call Return oder Complete on it !</param>
            <returns>Its <see cref="T:JobScheduler.JobHandle"/>.</returns>
        </member>
        <member name="M:JobScheduler.JobScheduler.Flush">
            <summary>
            Flushes all queued <see cref="T:JobScheduler.IJob"/>'s to the worker threads. 
            </summary>
        </member>
        <member name="P:JobScheduler.JobScheduler.Instance">
            <summary>
            Global instance. 
            </summary>
        </member>
        <member name="M:JobScheduler.JobScheduler.Dispose">
            <summary>
            Disposes all internals. 
            </summary>
        </member>
    </members>
</doc>
